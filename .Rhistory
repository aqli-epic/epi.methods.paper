# and remove "+" from "95+" and "-"'s from mr_dataset_2019 dataset's age_name_ll column
mr_dataset_2019$age_name_ll <- str_replace(mr_dataset_2019$age_name_ll, "(\\+)|(-)", "")
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(sf)
library(usethis)
library(devtools)
# load and document (for automatic rendering of the roxygen comments into a man file) to keep things updated
devtools::load_all()
devtools::document()
# custom operators
`%notin%` <- Negate(`%in%`)
# global parameters
gbd_year <- 2019
#> reading in the raw .csv file for mortality rates dataset from GBD for the year mentioned uptop in the "lib_glob_parameters" code chunk
mr_dataset_2019_raw <- read_csv("./data/raw/ihme_gbd_2019_mortality_rates_by_cause.csv")
#> drop certain columns and rename others to make them more intuitive
#> rename "cause_name" and "val" columns, arrange by (cause, age_id) and keep the following columns: age_id, age_name, cause_name, val.
mr_dataset_2019 <- mr_dataset_2019_raw %>%
rename(cause = cause_name,
mortal_rate = val,
sex = sex_name) %>%
select(age_id, age_name, cause, mortal_rate) %>%
arrange(cause, age_id)
#> Replace `age_name` column's following age_names with the specified counterparts: "<1" (age_id: 235) with "0-1"
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name = str_replace(age_name,  "<1 year", "0-1")) %>%
arrange(cause)
#> remove the "years" keyword from the age_name column and "+" from "95+"
mr_dataset_2019$age_name <- str_replace(mr_dataset_2019$age_name, "years", "")
#> Add an `age_interval_lower` column, which would be the lower limit of the `age_name` column
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name_ll = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(.)+(-)")),
age_name_ll = str_replace(mr_dataset_2019$age_name_ll, "(\\+)|(-)", ""),
age_name_ul = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(-)(.)+")),
age_name_ul = str_replace(mr_dataset_2019$age_name_ul, "(\\+)|(-)", ""),
age_name = str_replace(mr_dataset_2019$age_name, "(\\+)", ""))
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(sf)
library(usethis)
library(devtools)
# load and document (for automatic rendering of the roxygen comments into a man file) to keep things updated
devtools::load_all()
devtools::document()
# custom operators
`%notin%` <- Negate(`%in%`)
# global parameters
gbd_year <- 2019
#> reading in the raw .csv file for mortality rates dataset from GBD for the year mentioned uptop in the "lib_glob_parameters" code chunk
mr_dataset_2019_raw <- read_csv("./data/raw/ihme_gbd_2019_mortality_rates_by_cause.csv")
#> drop certain columns and rename others to make them more intuitive
#> rename "cause_name" and "val" columns, arrange by (cause, age_id) and keep the following columns: age_id, age_name, cause_name, val.
mr_dataset_2019 <- mr_dataset_2019_raw %>%
rename(cause = cause_name,
mortal_rate = val,
sex = sex_name) %>%
select(age_id, age_name, cause, mortal_rate) %>%
arrange(cause, age_id)
#> Replace `age_name` column's following age_names with the specified counterparts: "<1" (age_id: 235) with "0-1"
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name = str_replace(age_name,  "<1 year", "0-1")) %>%
arrange(cause)
#> remove the "years" keyword from the age_name column and "+" from "95+"
mr_dataset_2019$age_name <- str_replace(mr_dataset_2019$age_name, "years", "")
#> Add an `age_interval_lower` column, which would be the lower limit of the `age_name` column
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name_ll = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(.)+(-)")),
age_name_ll = str_replace(age_name_ll, "(\\+)|(-)", ""),
age_name_ul = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(-)(.)+")),
age_name_ul = str_replace(age_name_ul, "(\\+)|(-)", ""),
age_name = str_replace(age_name, "(\\+)", ""))
# # remove "+" from "95+" in mr_dataset_2019 dataset's "age_name" column
# mr_dataset_2019$age_name <- str_replace(mr_dataset_2019$age_name, "(\\+)", "")
#
# # and remove "+" from "95+" and "-"'s from mr_dataset_2019 dataset's age_name_ll column
# mr_dataset_2019$age_name_ll <- str_replace(mr_dataset_2019$age_name_ll, "(\\+)|(-)", "")
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(sf)
library(usethis)
library(devtools)
library(readxl)
# load and document (for automatic rendering of the roxygen comments into a man file) to keep things updated
devtools::load_all()
devtools::document()
# custom operators
`%notin%` <- Negate(`%in%`)
# global parameters
gbd_year <- 2019
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019 <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
View(rr_dataset_2019)
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
# remove top row as it only contains some text descriptions for the file
rr_dataset_2019 <- rr_dataset_2019_raw[2:nrow(rr_dataset_2019_raw), ]
View(rr_dataset_2019_raw)
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
View(rr_dataset_2019_raw)
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
str_detect(colnames(rr_dataset_2019), "years")
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(readr)
library(dplyr)
library(stringr)
library(magrittr)
library(ggplot2)
library(readr)
library(tidytext)
library(tidyr)
library(tidyverse)
library(sf)
library(usethis)
library(devtools)
library(readxl)
# load and document (for automatic rendering of the roxygen comments into a man file) to keep things updated
devtools::load_all()
devtools::document()
# custom operators
`%notin%` <- Negate(`%in%`)
# global parameters
gbd_year <- 2019
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "+", "")
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years|\\+")] <- age_name_column_names_vec_years_removed
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+", "")
age_name_column_names_vec_years_removed
age_name_column_names_vec_years_removed
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+", "")
age_name_column_names_vec_years_removed
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "//+ ", "")
age_name_column_names_vec_years_removed
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "(//+)(\\s+)", "")
age_name_column_names_vec_years_removed
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "(//+)(\\s+)", " ")
age_name_column_names_vec_years_removed
str_detect(age_name_column_names_vec_years_removed, "(//+)(\\s+)")
str_detect(age_name_column_names_vec_years_removed, "(//+)")
str_detect(age_name_column_names_vec_years_removed, "(///+)")
str_detect(age_name_column_names_vec_years_removed, "(////+)")
str_detect(age_name_column_names_vec_years_removed, "+")
str_detect(age_name_column_names_vec_years_removed, "/+")
str_detect(age_name_column_names_vec_years_removed, "//+")
str_detect(age_name_column_names_vec_years_removed, "30")
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "\\+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 3]
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 6]
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 4]
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 5]
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_replace(rr_dataset_2019[, 5], "^(.+)$")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_replace(rr_dataset_2019[, 5], "^(.+)$", "")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_extract(rr_dataset_2019[, 5], "^(.+)$", "")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_extract(rr_dataset_2019[, 5], "^(.+)$")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_extract(rr_dataset_2019[, 5], "^\\((.+)\\)$")
as.vector(rr_dataset_2019[, 5])
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_extract(as.vector(rr_dataset_2019[, 5]), "^\\((.+)\\)$")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_extract(as.vector(rr_dataset_2019[, 5]), "\\((.+)\\)")
as.vector(as.character(rr_dataset_2019[, 5]))
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_replace(as.vector(as.character(rr_dataset_2019[, 5])), "\\((.+)\\)", "")
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_replace(as.vector(as.character(rr_dataset_2019[, 5])), "\\((.+)\\)", "")[1]
# keep only the relative risks numbers and remove all confidence interval information. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
str_replace(as.vector(as.character(rr_dataset_2019[, 5])), "\\((.+)\\)", "")[1]
class(rr_dataset_2019$all_ages)
class(rr_dataset_2019$all_ages)[1]
rr_dataset_2019$all_ages[1]
str_extract(rr_dataset_2019$all_ages[1], "(")
str_extract(rr_dataset_2019$all_ages[1], "\\(")
str_replace(rr_dataset_2019$all_ages[1], "\\(", "")
str_replace_all(rr_dataset_2019$all_ages[1], "\\(", "")
str_replace_all(rr_dataset_2019$all_ages[1], "\\(", "")
str_replace_all(rr_dataset_2019$all_ages[1], "\\(|\\)", "")
str_replace_all(rr_dataset_2019$all_ages[1], "\\(.+\\)", "")
str_replace_all(rr_dataset_2019$all_ages[1], "\\(.+\\)$", "")
as.numeric(str_replace_all(rr_dataset_2019$all_ages[1], "\\(.+\\)$", ""))
# remove the "µg/m³" sign from the pm_level column
rr_dataset_2019[, "pm_levels"] <- str_remove(as.vector(rr_dataset_2019[, "pm_levels"]), "µg/m³")
# remove the "µg/m³" sign from the pm_level column
rr_dataset_2019[, "pm_level"] <- str_remove(as.vector(rr_dataset_2019[, "pm_level"]), "µg/m³")
as.vector(rr_dataset_2019[, "pm_level"])
rr_dataset_2019[, "pm_level"]
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "\\+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
rr_dataset_2019[, "pm_level"]
unlist(rr_dataset_2019[, "pm_level"])
as.vector(unlist(rr_dataset_2019[, "pm_level"]))
# remove the "µg/m³" sign from the pm_level column
rr_dataset_2019[, "pm_level"] <- str_remove(as.vector(unlist(rr_dataset_2019[, "pm_level"])), "µg/m³")
?map_df
str_replace(rr_dataset_2019$all_ages[1], )
rr_dataset_2019$all_ages[1]
str_replace(rr_dataset_2019$all_ages[1], "\\(.+\\)$", "")
map_dfc(rr_dataset_2019[, 6:ncol(rr_dataset_2019)], function(x){as.numeric(str_replace(x, "\\(.+\\)$"))})
map_dfc(rr_dataset_2019[, 6:ncol(rr_dataset_2019)], function(x){as.numeric(str_replace(x, "\\(.+\\)$", ""))})
map_dfc(rr_dataset_2019[, 5:ncol(rr_dataset_2019)], function(x){as.numeric(str_replace(x, "\\(.+\\)$", ""))})
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "\\+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
# remove the "µg/m³" sign from the pm_level column
rr_dataset_2019[, "pm_level"] <- str_remove(as.vector(unlist(rr_dataset_2019[, "pm_level"])), "µg/m³")
# keep only the relative risks numbers and remove all confidence interval information from all columns. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 5:ncol(rr_dataset_2019)] <- map_dfc(rr_dataset_2019[, 5:ncol(rr_dataset_2019)], function(x){as.numeric(str_replace(x, "\\(.+\\)$", ""))})
#> reading in the raw .csv file for mortality rates dataset from GBD for the year mentioned uptop in the "lib_glob_parameters" code chunk
mr_dataset_2019_raw <- read_csv("./data/raw/ihme_gbd_2019_mortality_rates_by_cause.csv")
View(mr_dataset_2019_raw)
#> reading in the raw .csv file for mortality rates dataset from GBD for the year mentioned uptop in the "lib_glob_parameters" code chunk
mr_dataset_2019_raw <- read_csv("./data/raw/ihme_gbd_2019_mortality_rates_by_cause.csv")
#> drop certain columns and rename others to make them more intuitive
# rename "cause_name" and "val" columns, arrange by (cause, age_id) and keep the following columns: age_id, age_name, cause_name, val.
mr_dataset_2019 <- mr_dataset_2019_raw %>%
rename(cause = cause_name,
mortal_rate = val,
sex = sex_name) %>%
select(age_id, age_name, cause, mortal_rate) %>%
arrange(cause, age_id)
#> Replace `age_name` column's following age_names with the specified counterparts: "<1" (age_id: 235) with "0-1"
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name = str_replace(age_name,  "<1 year", "0-1")) %>%
arrange(cause)
#> remove the "years" keyword from the age_name column and "+" from "95+"
mr_dataset_2019$age_name <- str_replace(mr_dataset_2019$age_name, "years", "")
#> Add an `age_interval_lower` and age_interval upper column, which would be the lower limit and upper limit of the `age_name` column and remove the "+" sign from the "age_name" column
mr_dataset_2019 <- mr_dataset_2019 %>%
mutate(age_name_ll = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(.)+(-)")),
age_name_ll = str_replace(age_name_ll, "(\\+)|(-)", ""),
age_name_ul = ifelse(str_detect(age_name, "\\+") == TRUE, str_replace(age_name, "\\+", "") , str_extract(age_name, "(-)(.)+")),
age_name_ul = str_replace(age_name_ul, "(\\+)|(-)", ""),
age_name = str_replace(age_name, "(\\+)", ""))
View(mr_dataset_2019)
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
View(mr_dataset_2019_raw)
View(rr_dataset_2019_raw)
#> reading in the raw .xlsx file for relative risks dataset from GBD for the year mentioned up top in the "lib_glob_parameters" code chunk
rr_dataset_2019_raw <- readxl::read_xlsx("./data/raw/ihme_gbd_2019_relative_risks_by_cause.xlsx")
#> creating a copy of the raw dataset and then using that for all analysis
rr_dataset_2019 <- rr_dataset_2019_raw
#> adding some basic structure to the raw data file such that we can clearly recognize the column names before we start cleaning. In doing so, remove the unnecessary descritive information from the file and only keep the information that is relevant for analysis.
# assign column names, which as of now are present in different rows (because the raw file was formatted this way).
colnames(rr_dataset_2019)[1:4] <- rr_dataset_2019[1, 1:4]
colnames(rr_dataset_2019)[5:ncol(rr_dataset_2019)] <- rr_dataset_2019[2, 5:ncol(rr_dataset_2019)]
# getting rid of first and second row of the dataset because they contain "column name" information, which has already been placed in its proper place in the step above.
rr_dataset_2019 <- rr_dataset_2019[4:nrow(rr_dataset_2019), ]
# rename certain columns (just removing spaces in between and converting to snake case)
colnames(rr_dataset_2019)[1] <- "cause" # "Risk/Outcome" column renamed to "Cause"
colnames(rr_dataset_2019)[2] <- "pm_level"
colnames(rr_dataset_2019)[3] <- "mortality_morbidity"
colnames(rr_dataset_2019)[4] <- "sex"
colnames(rr_dataset_2019)[5] <- "all_ages"
# removing the word "years" from the "ages" column names and also remove  any "+" signs in age columns (e.g. "95+")
age_name_column_names_vec <- colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")]
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec, "years", "")
age_name_column_names_vec_years_removed <- str_replace(age_name_column_names_vec_years_removed, "\\+", "")
# rename "ages" column using the new "years removed age column names"
colnames(rr_dataset_2019)[str_detect(colnames(rr_dataset_2019), "years")] <- age_name_column_names_vec_years_removed
# remove the "µg/m³" sign from the pm_level column
rr_dataset_2019[, "pm_level"] <- str_remove(as.vector(unlist(rr_dataset_2019[, "pm_level"])), "µg/m³")
# keep only the relative risks numbers and remove all confidence interval information from all columns. For example: if we have this: "2.345 (1.234 to 3.232)", after cleaning we should be left with "2.345".
rr_dataset_2019[, 5:ncol(rr_dataset_2019)] <- map_dfc(rr_dataset_2019[, 5:ncol(rr_dataset_2019)], function(x){as.numeric(str_replace(x, "\\(.+\\)$", ""))})
